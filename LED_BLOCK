const int ledPin = 1;
const int RX_PIN1 = A1;

int currentRead = 0;
bool play = false;
int playNum = 0;
bool extraBlank = false;
int ledCommand = 0;
int cycleCountDelay = 0;
int lastCommand = 0;
bool newVal = true;

int true1Count = 0;
int storage1 [14] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};
int store1Count = 0;
int averages1[5] = {0, 0, 0, 0, 0};
int totalAve1 = 0;
int trueVals1[2] = {0, 0};
float trueVal1 = 0.0;
int peakVal1 = 0;
float remainder1 = 0.0;
int storeNum1 = 0;
bool channel1 = false;
int channel1Count = 0;

const int inputVal[13] = {1, 2, 3, 4, 5, 6, 8, 10, 15, 20, 30, 50, 101};
const float scaleVal[13] = {6.0, 5.0, 4.67, 4.5, 4.4, 4.33, 4.25, 4.2, 4.13, 4.1, 4.03, 4.02, 4.0};
const int finalVal[13] = {6, 10, 14, 18, 22, 26, 34, 42, 62, 82, 121, 201, 405};

void setup() {
  pinMode(ledPin, OUTPUT);
  pinMode(RX_PIN1, INPUT);
}

void loop() {
  cycleCountDelay++;
  currentRead = analogRead(RX_PIN1);

  //Count channel disconnected
  if (channel1 == false) {
    channel1Count++;
  } else {
    if (channel1Count != 0) {
      channel1Count = 0;
    }
  }

  channel1 = false;

  for (int i = 4; i > 0; i--) {
    averages1[i] = averages1[i - 1];
  }
  averages1[0] = currentRead;

  totalAve1 = (averages1[4] + averages1[3] + averages1[2] + averages1[1] + averages1[0]) / 5;

  for (int i = 0; i < 12; i++) {
    if (totalAve1 >= finalVal[i] - 2 && totalAve1 <= finalVal[i + 1] - 2) {
      trueVal1 = totalAve1 / (int) map(totalAve1, finalVal[i], finalVal[i + 1], scaleVal[i], scaleVal[i + 1]);
    }
  }

  if (totalAve1 <= 3) {
    trueVal1 = 0.0;
  }

  if (totalAve1 >= finalVal[12]) {
    trueVal1 = totalAve1 / scaleVal[12];
  }

  if (totalAve1 >= 400 && totalAve1 <= 435) {
    trueVal1 = 100.0;
  }

  remainder1 = (float) trueVal1 - (int) trueVal1;
  trueVal1 = (int) trueVal1;

  if (remainder1 >= 0.5) {
    trueVal1++;
  }

  trueVals1[1] = trueVals1[0];
  trueVals1[0] = trueVal1;

  if (trueVals1[0] >= trueVals1[1] - 2 && trueVals1[0] <= trueVals1[1] + 2) {
    true1Count++;
  } else {
    if (true1Count != 0) {
      true1Count = 0;
    }
  }

  if (true1Count == 10) {
    peakVal1 = trueVals1[0];
  }

  for (int i = 0; i < 14; i++) {
    if (peakVal1 >= (120 + (i * 10)) - 2 && peakVal1 <= (120 + (i * 10)) + 2) {
      storeNum1 = i;
      channel1 = true;
      peakVal1 = (120 + (i * 10));
    }
  }

  if (peakVal1 <= 105) {
    storage1[storeNum1] = peakVal1;
  }

  //Set defaults if no number is connected
  if (channel1Count >= 100) {
    for (int i = 0; i < 14; i++) {
      storage1[i] = -1;
    }
    storage1[0] = 100;
    storage1[1] = 100;
    storage1[2] = 0;
  }

  for (int i = 13; i >= 0; i--) {
    if (storage1[i] == -1) {
      store1Count = i - 1;
    }
  }

  if (store1Count == 0 || store1Count == 2 || store1Count == 4 || store1Count == 6 || store1Count == 8 || store1Count == 10 || store1Count == 12) {
    extraBlank = true;
  }

  if (playNum > store1Count) {
    playNum = 0;
  }

  if (cycleCountDelay < storage1[playNum]) {
    if (playNum == store1Count && extraBlank == true) {
      ledCommand = 0;
    } else {
      ledCommand = (int) ((255 * storage1[playNum + 1]) / 100);
    }
  } else {
    cycleCountDelay = 0;
    playNum += 2;
  }

  if(lastCommand > ledCommand + 2 || lastCommand < ledCommand - 2){
    newVal = true;
  }else{
    newVal = false;
  }

  if (newVal == true) {
    analogWrite(ledPin, ledCommand);
    lastCommand = ledCommand;
  }

  delay(20);
}
