#define RX_PIN1 A1
#define RX_PIN2 A2
#define TX_PIN1 0

const int inputVal[12] = {1, 2, 3, 4, 5, 6, 8, 10, 15, 20, 30, 50};
const float scaleVal[12] = {6.0, 5.0, 4.67, 4.5, 4.4, 4.33, 4.25, 4.2, 4.13, 4.1, 4.03, 4.02};
const int finalVal[12] = {6, 10, 14, 18, 22, 26, 34, 42, 62, 82, 121, 201};

bool TX_Type = false;
int command = true;
uint8_t cycleCountDelay = 0;
uint8_t cycleClock1 = 0;
uint8_t cycleClock2 = 0;
int lastCommand = false;
uint8_t compare1 = 0;
uint8_t compare2 = 0;
bool newVal = true;
bool disconnected1 = false;

bool disconnected2 = false;

uint8_t speeds[4] = {100, 50, 25, 12};
uint8_t speedVal1 = 55;
uint8_t speedVal2 = 55;

uint8_t totalVals1[3] = {0, 0, 99};
bool collectTotalVals1 = false;
bool collectSpeed1 = false;
uint8_t sameVals1 = 0;
bool valArray1 = true;
bool valSet1 = false;

uint8_t totalVals2[3] = {0, 0, 99};
bool collectTotalVals2 = false;
bool collectSpeed2 = false;
uint8_t sameVals2 = 0;
bool valArray2 = true;
bool valSet2 = false;

int currentRead1 = 0;
uint8_t storage1 [99] = {};
uint8_t store1Count = 100;
int averages1[5] = {0, 0, 0, 0, 0};
int totalAve1 = 0;
float trueVal1 = 0.0;
uint8_t trueVals1[5] = {0, 0, 0, 0, 0};
int peakVal1 = 0;
float remainder1 = 0.0;
uint8_t storeNum1 = 0;
uint8_t storeTotalVals1 = 0;
int peakDetection1 = 0;

int currentRead2 = 0;
uint8_t storage2 [99] = {};
uint8_t store2Count = 100;
int averages2[5] = {0, 0, 0, 0, 0};
int totalAve2 = 0;
float trueVal2 = 0.0;
uint8_t trueVals2[5] = {0, 0, 0, 0, 0};
int peakVal2 = 0;
float remainder2 = 0.0;
uint8_t storeNum2 = 0;
uint8_t storeTotalVals2 = 0;
int peakDetection2 = 0;

void setup() {
  pinMode(RX_PIN1, INPUT);
  pinMode(RX_PIN2, INPUT);
  pinMode(TX_PIN1, OUTPUT);

  for (uint8_t i = 0; i < 99; i++) {
    storage1[i] = 255;
    storage2[i] = 255;
  }
}

void loop() {
  cycleCountDelay++;
  cycleClock1++;
  cycleClock2++;
  currentRead1 = analogRead(RX_PIN1);
  currentRead2 = analogRead(RX_PIN2);

  //Running average of analogRead values
  for (uint8_t i = 4; i > 0; i--) {
    averages1[i] = averages1[i - 1];
    averages2[i] = averages2[i - 1];
  }
  averages1[0] = currentRead1;
  averages2[0] = currentRead2;

  totalAve1 = (averages1[4] + averages1[3] + averages1[2] + averages1[1] + averages1[0]) / 5;
  totalAve2 = (averages2[4] + averages2[3] + averages2[2] + averages2[1] + averages2[0]) / 5;

  for (int i = 0; i < 11; i++) {
    if (totalAve1 >= finalVal[i] - 2 && totalAve1 <= finalVal[i + 1] - 2) {
      trueVal1 = totalAve1 / (int) map(totalAve1, finalVal[i], finalVal[i + 1], scaleVal[i], scaleVal[i + 1]);
    }
    if (totalAve2 >= finalVal[i] - 2 && totalAve2 <= finalVal[i + 1] - 2) {
      trueVal2 = totalAve2 / (int) map(totalAve2, finalVal[i], finalVal[i + 1], scaleVal[i], scaleVal[i + 1]);
    }
  }

  if (totalAve1 >= finalVal[11]) {
    trueVal1 = totalAve1 / scaleVal[11];
  }
  if (totalAve2 >= finalVal[11]) {
    trueVal2 = totalAve2 / scaleVal[11];
  }

  //Round the value by 0.5
  remainder1 = (float) trueVal1 - (int) trueVal1;
  trueVal1 = (int) trueVal1;

  if (remainder1 >= 0.5) {
    trueVal1++;
  }

  remainder2 = (float) trueVal2 - (int) trueVal2;
  trueVal2 = (int) trueVal2;

  if (remainder2 >= 0.5) {
    trueVal2++;
  }

  //Store 5 trueVals
  for (uint8_t i = 4; i > 0; i--) {
    trueVals1[i] = trueVals1[i - 1];
    trueVals2[i] = trueVals2[i - 1];
  }
  trueVals1[0] = trueVal1;
  trueVals2[0] = trueVal2;

  sameVals1 = 0;
  for (uint8_t i = 4; i > 0; i--) {
    if (trueVals1[i] - trueVals1[0] >= -3 && trueVals1[i] - trueVals1[0] <= 3) {
      sameVals1++;
    }
  }

  sameVals2 = 0;
  for (uint8_t i = 4; i > 0; i--) {
    if (trueVals2[i] - trueVals2[0] >= -3 && trueVals2[i] - trueVals2[0] <= 3) {
      sameVals2++;
    }
  }

  if (sameVals1 == 4) {
    peakDetection1++;
  } else {
    peakDetection1 = 0;
  }

  if (sameVals2 == 4) {
    peakDetection2++;
  } else {
    peakDetection2 = 0;
  }

  if (trueVal1 < 5) {
    disconnected1 = true;
  }

  if (trueVal2 < 5) {
    disconnected2 = true;
  }

  if (trueVal1 > 70) {
    disconnected1 = false;
  }

  if (trueVal2 > 70) {
    disconnected2 = false;
  }

  if ((disconnected1 == false) && (peakDetection1 == 5) || (peakDetection1 > 5 && cycleClock1 > 20)) {
    peakVal1 = (trueVals1[0] + trueVals1[1] + trueVals1[2] + trueVals1[3] + trueVals1[4]) / 5;

    if (peakVal1 <= 125 + 3 && peakVal1 >= 125 - 3) {
      valSet1 = true;
      valArray1 = false;
      for (uint8_t i = 1; i < 99; i++) {
        storage1[i] = 255;
      }
    }

    if (peakVal1 <= 135 + 3 && peakVal1 >= 135 - 3) {
      collectTotalVals1 = true;
      valArray1 = true;
      valSet1 = false;
    }

    //It is array type but haven't received the signal
    if (valSet1 == false) {
      if (peakVal1 >= 10 && peakVal1 <= 120) {
        if (collectTotalVals1 == false && collectSpeed1 == false) {
          storeNum1++;
        }
      }
    }

    if (storeNum1 > totalVals1[2]) {
      storeNum1 = 1;
    }

    peakVal1 -= 15;

    if (peakVal1 >= 100 && peakVal1 < 105) {
      peakVal1 = 100;
    }
    if (peakVal1 <= 0 && peakVal1 > -5) {
      peakVal1 = 0;
    }

    if (disconnected1 == false) {
      if (valSet1 == false) {
        if (collectTotalVals1 == true) {
          for (uint8_t i = 0; i < 10; i++) {
            if (peakVal1 >= (i * 10) - 4 && peakVal1 <= (i * 10) + 4) {
              totalVals1[storeTotalVals1] = i;
              storeTotalVals1++;
            }
          }
          if (storeTotalVals1 == 2) {
            totalVals1[2] = (totalVals1[0] * 10) + totalVals1[1];
            collectTotalVals1 = false;
            collectSpeed1 = true;
            storeTotalVals1 = 0;
            for (uint8_t i = totalVals1[2]; i < 99; i++) {
              storage1[i] = 255;
            }
          }
        } else {
          if (collectSpeed1 == true) {
            if (peakVal1 >= 0 && peakVal1 <= 100) {
              for (uint8_t i = 0; i < 4; i++) {
                if (peakVal1 <= (i * 25) + 5 && peakVal1 >= (i * 25) - 5) {
                  speedVal1 = speeds[i];
                  valArray1 = true;
                  collectSpeed1 = false;
                }
              }
            }
          } else {
            if (peakVal1 >= 0 && peakVal1 <= 100) {
              storage1[storeNum1 - 1] = peakVal1;
              if (storage1[0] != 0) {
              }
            }
          }
        }
      }
      if (valSet1 == true) {
        storeNum1 = 0;
        if (peakVal1 >= 0 && peakVal1 <= 100) {
          storage1[0] = peakVal1;
        }
      }
    }
    cycleClock1 = 0;
  }

  if ((disconnected2 == false) && (peakDetection2 == 5) || (peakDetection2 > 5 && cycleClock2 > 20)) {
    peakVal2 = (trueVals2[0] + trueVals2[1] + trueVals2[2] + trueVals2[3] + trueVals2[4]) / 5;
    if (peakVal2 <= 125 + 3 && peakVal2 >= 125 - 3) {
      valSet2 = true;
      valArray2 = false;
      for (uint8_t i = 1; i < 99; i++) {
        storage2[i] = 255;
      }
    }

    if (peakVal2 <= 135 + 3 && peakVal2 >= 135 - 3) {
      collectTotalVals2 = true;
      valArray2 = true;
      valSet2 = false;
    }

    //It is array type but haven't received the signal
    if (valSet2 == false) {
      if (peakVal2 >= 10 && peakVal2 <= 120) {
        if (collectTotalVals2 == false && collectSpeed2 == false) {
          storeNum2++;
        }
      }
    }

    if (storeNum2 > totalVals2[2]) {
      storeNum2 = 1;
    }

    peakVal2 -= 15;

    if (peakVal2 >= 100 && peakVal2 < 105) {
      peakVal2 = 100;
    }
    if (peakVal2 <= 0 && peakVal2 > -5) {
      peakVal2 = 0;
    }

    if (disconnected2 == false) {
      if (valSet2 == false) {
        if (collectTotalVals2 == true) {
          for (uint8_t i = 0; i < 10; i++) {
            if (peakVal2 >= (i * 10) - 4 && peakVal2 <= (i * 10) + 4) {
              totalVals2[storeTotalVals2] = i;
              storeTotalVals2++;
            }
          }
          if (storeTotalVals2 == 2) {
            totalVals2[2] = (totalVals2[0] * 10) + totalVals2[1];
            collectTotalVals2 = false;
            collectSpeed2 = true;
            storeTotalVals2 = 0;
            for (uint8_t i = totalVals2[2]; i < 99; i++) {
              storage2[i] = 255;
            }
          }
        } else {
          if (collectSpeed2 == true) {
            if (peakVal2 >= 0 && peakVal2 <= 100) {
              for (uint8_t i = 0; i < 4; i++) {
                if (peakVal2 <= (i * 25) + 5 && peakVal2 >= (i * 25) - 5) {
                  speedVal2 = speeds[i];
                  valArray2 = true;
                  collectSpeed2 = false;
                }
              }
            }
          } else {
            if (peakVal2 >= 0 && peakVal2 <= 100) {
              storage2[storeNum2 - 1] = peakVal2;
              if (storage2[0] != 0) {
              }
            }
          }
        }
      }
      if (valSet2 == true) {
        storeNum2 = 0;
        if (peakVal2 >= 0 && peakVal2 <= 100) {
          storage2[0] = peakVal2;
        }
      }
    }
    cycleClock2 = 0;
  }

  if (disconnected1 == true) {
    valArray1 = true;
    valSet1 = false;
    speedVal1 = 55;
    storeNum1 = 0;
    cycleCountDelay = 0;
    for (uint8_t i = 0; i < 99; i++) {
      storage1[i] = 255;
    }
  }

  if (disconnected2 > true) {
    valArray2 = true;
    valSet2 = false;
    speedVal2 = 55;
    storeNum2 = 0;
    cycleCountDelay = 0;
    for (uint8_t i = 0; i < 99; i++) {
      storage2[i] = 255;
    }
  }

  if (valSet1 == true) {
    cycleClock1 = 0;
  }

  if (valSet2 == true) {
    cycleClock2 = 0;
  }

  for (uint8_t i = 98; i > 0; i--) {
    if (storage1[i] == 255) {
      store1Count = i;
    }
  }

  for (uint8_t i = 98; i > 0; i--) {
    if (storage2[i] == 255) {
      store2Count = i;
    }
  }

  if (storage1[0] != 255 && storage2[0] != 255) {
    if (valSet1 == true && valArray1 == false) {
      compare1 = storage1[0];
    }
    if (valSet2 == true && valArray2 == false) {
      compare2 = storage2[0];
    }

    if (valSet1 == false && valArray1 == true) {
      compare1 = totalVals1[2];
    }
    if (valSet2 == false && valArray2 == true) {
      compare2 = totalVals2[2];
    }

    if (TX_Type == false) {
      if (cycleCountDelay < 25) {
        command = 125;
      } else {
        cycleCountDelay = 0;
        TX_Type = true;
      }
    } else {
      if (cycleCountDelay < 100) {
        //if (compare1 == compare2) { //EQUAL TO
        //if (compare1 != compare2) { //UNEQUAL TO
        //if (compare1 > compare2) { //GREATER THAN
        //if (compare1 < compare2) { //LESS THAN
        if (compare1 >= compare2) { //GREATER THAN OR EQUAL TO
          //if (compare1 <= compare2) { //LESS THAN OR EQUAL TO
          command = 100 + 3 + 15;
        } else {
          command = 0 - 3 + 15;
        }
      } else {
        cycleCountDelay = 0;
        TX_Type = false;
      }
    }
  }

  //Only call the analogWrite if there is a significantly different value to send
  if (lastCommand > command + 1 || lastCommand < command - 1) {
    newVal = true;
  } else {
    newVal = false;
  }

  if (newVal == true) {
    analogWrite(TX_PIN1, command);
    lastCommand = command;
  }

  if (storage1[0] == 255 || storage2[0] == 255 || disconnected1 == true || disconnected2 == true) {
    analogWrite(TX_PIN1, 0 - 3 + 15);
  }
  
  delay(10);
}
